"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionTooltip = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const React = tslib_1.__importStar(require("react"));
const hooks_1 = require("../../hooks");
const private_1 = require("../../hooks/private");
const Hotkey_1 = require("../Hotkey");
const Popup_1 = require("../Popup");
const cn_1 = require("../utils/cn");
const getElementRef_1 = require("../utils/getElementRef");
require("./ActionTooltip.css");
const DEFAULT_PLACEMENT = ['bottom', 'top'];
const b = (0, cn_1.block)('action-tooltip');
function ActionTooltip(props) {
    const { placement = DEFAULT_PLACEMENT, title, hotkey, children, className, contentClassName, description, disabled = false, style, qa, id, disablePortal } = props, delayProps = tslib_1.__rest(props, ["placement", "title", "hotkey", "children", "className", "contentClassName", "description", "disabled", "style", "qa", "id", "disablePortal"]);
    const [anchorElement, setAnchorElement] = React.useState(null);
    const tooltipVisible = (0, private_1.useTooltipVisible)(anchorElement, delayProps);
    const renderPopup = () => {
        return ((0, jsx_runtime_1.jsx)(Popup_1.Popup, { id: id, disablePortal: disablePortal, role: "tooltip", className: b(null, className), style: style, open: tooltipVisible && !disabled, placement: placement, anchorRef: { current: anchorElement }, disableEscapeKeyDown: true, disableOutsideClick: true, disableLayer: true, qa: qa, children: (0, jsx_runtime_1.jsxs)("div", { className: b('content', contentClassName), children: [(0, jsx_runtime_1.jsxs)("div", { className: b('heading'), children: [(0, jsx_runtime_1.jsx)("div", { className: b('title'), children: title }), hotkey && (0, jsx_runtime_1.jsx)(Hotkey_1.Hotkey, { view: "dark", value: hotkey, className: b('hotkey') })] }), description && (0, jsx_runtime_1.jsx)("div", { className: b('description'), children: description })] }) }));
    };
    const child = React.Children.only(children);
    const childRef = (0, getElementRef_1.getElementRef)(child);
    const ref = (0, hooks_1.useForkRef)(setAnchorElement, childRef);
    return ((0, jsx_runtime_1.jsxs)(React.Fragment, { children: [React.cloneElement(child, { ref }), anchorElement ? renderPopup() : null] }));
}
exports.ActionTooltip = ActionTooltip;
