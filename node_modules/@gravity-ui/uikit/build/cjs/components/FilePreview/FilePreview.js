"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilePreview = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const React = tslib_1.__importStar(require("react"));
const icons_1 = require("@gravity-ui/icons");
const hooks_1 = require("../../hooks");
const private_1 = require("../../hooks/private");
const Icon_1 = require("../Icon");
const Text_1 = require("../Text");
const mobile_1 = require("../mobile");
const cn_1 = require("../utils/cn");
const FilePreviewAction_1 = require("./FilePreviewAction");
const MobileImagePreview_1 = require("./MobileImagePreview/MobileImagePreview");
const utils_1 = require("./utils");
require("./FilePreview.css");
const cn = (0, cn_1.block)('file-preview');
const FILE_ICON = {
    default: icons_1.FileQuestion,
    image: icons_1.Picture,
    video: icons_1.Filmstrip,
    code: icons_1.Code,
    archive: icons_1.FileZipper,
    audio: icons_1.MusicNote,
    music: icons_1.MusicNote,
    text: icons_1.TextAlignLeft,
    pdf: icons_1.LogoAcrobat,
    table: icons_1.LayoutHeaderCellsLarge,
};
function FilePreview({ className, qa, file, imageSrc, description, onClick, actions, }) {
    const id = (0, hooks_1.useUniqId)();
    const [previewSrc, setPreviewSrc] = React.useState(imageSrc);
    const [isPreviewSheetVisible, showPreviewSheet, closePreviewSheet] = (0, private_1.useBoolean)(false);
    const mobile = (0, mobile_1.useMobile)();
    const type = (0, utils_1.getFileType)(file);
    const { onKeyDown } = (0, hooks_1.useActionHandlers)(onClick);
    React.useEffect(() => {
        if (imageSrc || type !== 'image')
            return undefined;
        try {
            const createdUrl = URL.createObjectURL(file);
            setPreviewSrc(createdUrl);
            return () => {
                URL.revokeObjectURL(createdUrl);
            };
        }
        catch (error) {
            return undefined;
        }
    }, [file, imageSrc, type]);
    const clickable = Boolean(onClick);
    const withActions = Boolean(actions === null || actions === void 0 ? void 0 : actions.length);
    const isPreviewString = typeof previewSrc === 'string';
    const hideActions = isPreviewString && mobile;
    const handleClick = React.useCallback((e) => {
        if (onClick) {
            onClick(e);
            return;
        }
        if (mobile && isPreviewString) {
            showPreviewSheet();
        }
    }, [isPreviewString, mobile, onClick, showPreviewSheet]);
    return ((0, jsx_runtime_1.jsxs)("div", { className: cn(null, className), "data-qa": qa, children: [(0, jsx_runtime_1.jsxs)("div", { className: cn('card', { clickable, hoverable: clickable || withActions }), role: clickable ? 'button' : undefined, onKeyDown: clickable ? onKeyDown : undefined, tabIndex: clickable ? 0 : undefined, onClick: clickable ? handleClick : undefined, children: [isPreviewString ? ((0, jsx_runtime_1.jsx)("div", { className: cn('image-container'), children: (0, jsx_runtime_1.jsx)("img", { className: cn('image'), src: previewSrc, alt: file.name }) })) : ((0, jsx_runtime_1.jsx)("div", { className: cn('icon', { type }), children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { className: cn('icon-svg'), data: FILE_ICON[type], size: 20 }) })), (0, jsx_runtime_1.jsx)(Text_1.Text, { className: cn('name'), color: "secondary", ellipsis: true, title: file.name, children: file.name }), Boolean(description) && ((0, jsx_runtime_1.jsx)(Text_1.Text, { className: cn('description'), color: "secondary", ellipsis: true, title: description, children: description }))] }), (actions === null || actions === void 0 ? void 0 : actions.length) ? ((0, jsx_runtime_1.jsx)("div", { className: cn('actions', { hide: hideActions }), children: actions.map((action, index) => ((0, jsx_runtime_1.jsx)(FilePreviewAction_1.FilePreviewAction, Object.assign({ id: `${id}-${index}` }, action), `${id}-${index}`))) })) : null, (0, jsx_runtime_1.jsx)(MobileImagePreview_1.MobileImagePreview, { visible: isPreviewSheetVisible, onClose: closePreviewSheet, actions: actions, previewSrc: previewSrc, fileName: file.name })] }));
}
exports.FilePreview = FilePreview;
FilePreview.displayName = 'FilePreview';
