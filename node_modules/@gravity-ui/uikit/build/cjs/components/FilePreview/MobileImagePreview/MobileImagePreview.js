"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MobileImagePreview = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const React = tslib_1.__importStar(require("react"));
const icons_1 = require("@gravity-ui/icons");
const Button_1 = require("../../Button");
const Icon_1 = require("../../Icon");
const Sheet_1 = require("../../Sheet");
const cn_1 = require("../../utils/cn");
const i18n_1 = tslib_1.__importDefault(require("../i18n"));
require("./MobileImagePreview.css");
const cn = (0, cn_1.block)('mobile-image-preview');
function MobileImagePreview({ previewSrc, visible, onClose, actions, fileName, }) {
    const [showError, setShowError] = React.useState(false);
    const showSheet = Boolean(previewSrc && visible);
    const handleImagesError = () => {
        setShowError(true);
    };
    return ((0, jsx_runtime_1.jsx)(Sheet_1.Sheet, { visible: showSheet, onClose: onClose, contentClassName: cn('sheet-content'), children: (0, jsx_runtime_1.jsxs)("div", { className: cn('container'), style: {}, children: [showError ? ((0, jsx_runtime_1.jsx)("div", { className: cn('error-label'), children: (0, i18n_1.default)('label_image-preview-error') })) : ((0, jsx_runtime_1.jsx)("img", { className: cn('image'), src: previewSrc, alt: fileName, onError: handleImagesError })), (0, jsx_runtime_1.jsx)(Button_1.Button, { view: "raised", size: "xl", className: cn('back-button'), onClick: onClose, children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { data: icons_1.ArrowLeft, size: 20 }) }), (0, jsx_runtime_1.jsx)("div", { className: cn('action-buttons'), children: actions === null || actions === void 0 ? void 0 : actions.map((action) => ((0, jsx_runtime_1.jsx)(Button_1.Button, { size: "xl", onClick: action.onClick, view: "raised", children: "action.icon" }, action.id))) })] }) }));
}
exports.MobileImagePreview = MobileImagePreview;
MobileImagePreview.displayName = 'MobileImagePreview';
