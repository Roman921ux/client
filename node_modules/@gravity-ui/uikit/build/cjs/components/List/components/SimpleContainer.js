"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleContainer = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const React = tslib_1.__importStar(require("react"));
const range_1 = tslib_1.__importDefault(require("lodash/range"));
function getRefs(count) {
    return (0, range_1.default)(count).reduce((acc, index) => {
        acc[index] = React.createRef();
        return acc;
    }, {});
}
class SimpleContainer extends React.Component {
    static getDerivedStateFromProps({ itemCount }, prevState) {
        const refsCount = Object.keys(prevState.refsList).length;
        if (itemCount === refsCount) {
            return prevState;
        }
        else {
            return {
                refsList: getRefs(itemCount),
            };
        }
    }
    constructor(props) {
        super(props);
        this.node = null;
        this.setRef = (node) => {
            var _a;
            this.node = node;
            (_a = this.props.provided) === null || _a === void 0 ? void 0 : _a.innerRef(node);
        };
        this.state = {
            refsList: getRefs(props.itemCount),
        };
    }
    render() {
        const children = React.Children.map(this.props.children, (child, index) => React.cloneElement(child, { ref: this.state.refsList[index] }));
        return (0, jsx_runtime_1.jsx)("div", { ref: this.setRef, children: children });
    }
    scrollToItem(index) {
        var _a, _b, _c, _d;
        const listItem = (_a = this.state.refsList[index]) === null || _a === void 0 ? void 0 : _a.current;
        if (listItem && typeof listItem.getNode === 'function') {
            const node = listItem.getNode();
            if (node) {
                if (!((_c = (_b = this.props).onScrollToItem) === null || _c === void 0 ? void 0 : _c.call(_b, node))) {
                    (_d = node.scrollIntoView) === null || _d === void 0 ? void 0 : _d.call(node, { block: 'nearest' });
                }
            }
        }
    }
}
exports.SimpleContainer = SimpleContainer;
