"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.Modal = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const React = tslib_1.__importStar(require("react"));
const react_transition_group_1 = require("react-transition-group");
const hooks_1 = require("../../hooks");
const private_1 = require("../../hooks/private");
const Portal_1 = require("../Portal");
const FocusTrap_1 = require("../utils/FocusTrap");
const cn_1 = require("../utils/cn");
const layer_manager_1 = require("../utils/layer-manager");
const transition_1 = require("../utils/transition");
require("./Modal.css");
const b = (0, cn_1.block)('modal');
function Modal({ open = false, keepMounted = false, disableBodyScrollLock = false, disableEscapeKeyDown, disableOutsideClick, disableFocusTrap, disableAutoFocus, focusTrap = true, autoFocus = true, restoreFocusRef, onEscapeKeyDown, onEnterKeyDown, onOutsideClick, onClose, onTransitionEnter, onTransitionEntered, onTransitionExit, onTransitionExited, children, style, contentOverflow = 'visible', className, contentClassName, 'aria-labelledby': ariaLabelledBy, 'aria-label': ariaLabel, container, qa, }) {
    const containerRef = React.useRef(null);
    const contentRef = React.useRef(null);
    const [inTransition, setInTransition] = React.useState(false);
    (0, hooks_1.useBodyScrollLock)({ enabled: !disableBodyScrollLock && (open || inTransition) });
    const containerProps = (0, private_1.useRestoreFocus)({
        enabled: open || inTransition,
        restoreFocusRef,
        focusTrapped: true,
    });
    (0, layer_manager_1.useLayer)({
        open,
        disableEscapeKeyDown,
        disableOutsideClick,
        onEscapeKeyDown,
        onEnterKeyDown,
        onOutsideClick,
        onClose,
        contentRefs: [contentRef],
        type: 'modal',
    });
    return ((0, jsx_runtime_1.jsx)(react_transition_group_1.CSSTransition, { nodeRef: containerRef, in: open, addEndListener: (done) => { var _a; return (_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.addEventListener('animationend', done); }, classNames: (0, transition_1.getCSSTransitionClassNames)(b), mountOnEnter: !keepMounted, unmountOnExit: !keepMounted, appear: true, onEnter: () => {
            setInTransition(true);
            onTransitionEnter === null || onTransitionEnter === void 0 ? void 0 : onTransitionEnter();
        }, onExit: () => {
            setInTransition(true);
            onTransitionExit === null || onTransitionExit === void 0 ? void 0 : onTransitionExit();
        }, onEntered: () => {
            setInTransition(false);
            onTransitionEntered === null || onTransitionEntered === void 0 ? void 0 : onTransitionEntered();
        }, onExited: () => {
            setInTransition(false);
            onTransitionExited === null || onTransitionExited === void 0 ? void 0 : onTransitionExited();
        }, children: (0, jsx_runtime_1.jsx)(Portal_1.Portal, { container: container, children: (0, jsx_runtime_1.jsx)("div", { ref: containerRef, style: style, className: b({ open }, className), "data-qa": qa, children: (0, jsx_runtime_1.jsx)("div", { className: b('content-aligner'), children: (0, jsx_runtime_1.jsx)("div", { className: b('content-wrapper'), children: (0, jsx_runtime_1.jsx)(FocusTrap_1.FocusTrap, { enabled: !disableFocusTrap && focusTrap && open && !inTransition, autoFocus: !disableAutoFocus && autoFocus, children: (0, jsx_runtime_1.jsx)("div", Object.assign({ ref: contentRef, tabIndex: -1, role: "dialog", "aria-modal": open, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, className: b('content', { 'has-scroll': contentOverflow === 'auto' }, contentClassName) }, containerProps, { children: children })) }) }) }) }) }) }));
}
exports.Modal = Modal;
