"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PersonaWrap = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const icons_1 = require("@gravity-ui/icons");
const Icon_1 = require("../Icon");
const cn_1 = require("../utils/cn");
require("./PersonaWrap.css");
const b = (0, cn_1.block)('persona');
function PersonaWrap({ size = 's', theme = 'default', isEmpty, onClick, onClose, className, avatar, children, style, closeButtonAriaAttributes, qa, }) {
    const clickable = Boolean(onClick);
    const closeable = Boolean(onClose);
    const MainComponent = clickable ? 'button' : 'div';
    return ((0, jsx_runtime_1.jsxs)("div", { className: b({ size, theme, clickable, closeable, empty: isEmpty }, className), style: style, "data-qa": qa, children: [(0, jsx_runtime_1.jsxs)(MainComponent, { onClick: onClick, className: b('main'), children: [avatar && (0, jsx_runtime_1.jsx)("div", { className: b('avatar'), children: avatar }), (0, jsx_runtime_1.jsx)("div", { className: b('text'), children: children })] }), onClose && ((0, jsx_runtime_1.jsx)("button", Object.assign({ className: b('close'), onClick: onClose }, closeButtonAriaAttributes, { children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { data: icons_1.Xmark, size: 12, className: b('close-icon') }) })))] }));
}
exports.PersonaWrap = PersonaWrap;
PersonaWrap.displayName = 'PersonaWrap';
