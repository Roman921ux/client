"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectControl = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const React = tslib_1.__importStar(require("react"));
const icons_1 = require("@gravity-ui/icons");
const isEmpty_1 = tslib_1.__importDefault(require("lodash/isEmpty"));
const hooks_1 = require("../../../../hooks");
const Icon_1 = require("../../../Icon");
const Popover_1 = require("../../../Popover");
const constants_1 = require("../../constants");
const i18n_1 = tslib_1.__importDefault(require("../../i18n"));
const SelectClear_1 = require("../SelectClear/SelectClear");
const SelectCounter_1 = require("../SelectCounter/SelectCounter");
require("./SelectControl.css");
exports.SelectControl = React.forwardRef((props, ref) => {
    const { toggleOpen, clearValue, onKeyDown, renderControl, view, size, pin, selectedOptionsContent, className, qa, label, placeholder, isErrorVisible, errorMessage, open, disabled, value, hasClear, popupId, selectId, activeIndex, renderCounter, hasCounter, title, } = props;
    const showOptionsText = Boolean(selectedOptionsContent);
    const showPlaceholder = Boolean(placeholder && !showOptionsText);
    const hasValue = Array.isArray(value) && !(0, isEmpty_1.default)(value.filter(Boolean));
    const errorTooltipId = (0, hooks_1.useUniqId)();
    const [isDisabledButtonAnimation, setIsDisabledButtonAnimation] = React.useState(false);
    const controlMods = {
        open,
        size,
        pin,
        disabled,
        error: isErrorVisible,
        'has-clear': hasClear,
        'no-active': isDisabledButtonAnimation,
        'has-value': hasValue,
    };
    const buttonMods = {
        open,
        size,
        view,
        pin,
        disabled,
        error: isErrorVisible,
    };
    const handleControlClick = React.useCallback((e) => {
        // Fix for Safari
        // https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#clicking_and_focus
        if (e && e.currentTarget !== document.activeElement && 'focus' in e.currentTarget) {
            e.currentTarget.focus();
        }
        toggleOpen();
    }, [toggleOpen]);
    const disableButtonAnimation = React.useCallback(() => {
        setIsDisabledButtonAnimation(true);
    }, []);
    const enableButtonAnimation = React.useCallback(() => {
        setIsDisabledButtonAnimation(false);
    }, []);
    const handleOnClearIconClick = React.useCallback(() => {
        // return animation on clear click
        setIsDisabledButtonAnimation(false);
        clearValue();
    }, [clearValue]);
    const renderCounterComponent = () => {
        if (!hasCounter) {
            return null;
        }
        const count = value.length;
        const counterComponent = (0, jsx_runtime_1.jsx)(SelectCounter_1.SelectCounter, { count: count, size: size, disabled: disabled });
        return renderCounter
            ? renderCounter(counterComponent, { count, size, disabled })
            : counterComponent;
    };
    const renderClearIcon = (args) => {
        const valueIsEmpty = value.length === 0;
        if (!hasClear || valueIsEmpty || disabled) {
            return null;
        }
        return ((0, jsx_runtime_1.jsx)(SelectClear_1.SelectClear, { size: size, onClick: handleOnClearIconClick, onMouseEnter: disableButtonAnimation, onMouseLeave: enableButtonAnimation, renderIcon: args.renderIcon }));
    };
    const triggerProps = {
        id: selectId,
        role: 'combobox',
        'aria-controls': open ? popupId : undefined,
        'aria-haspopup': 'listbox',
        'aria-expanded': open,
        'aria-activedescendant': activeIndex === undefined ? undefined : `${popupId}-item-${activeIndex}`,
        onClick: handleControlClick,
        onKeyDown,
        disabled,
    };
    if (renderControl) {
        return renderControl({
            onKeyDown,
            onClear: clearValue,
            onClick: handleControlClick,
            renderClear: renderClearIcon,
            renderCounter: renderCounterComponent,
            ref,
            open,
            popupId,
            selectId,
            activeIndex,
            disabled,
            triggerProps,
        }, { value });
    }
    return ((0, jsx_runtime_1.jsx)(React.Fragment, { children: (0, jsx_runtime_1.jsxs)("div", { className: (0, constants_1.selectControlBlock)(controlMods), role: "group", children: [(0, jsx_runtime_1.jsxs)("button", Object.assign({ ref: ref, className: (0, constants_1.selectControlButtonBlock)(buttonMods, className), type: "button", "data-qa": qa, title: title, tabIndex: 0 }, triggerProps, { children: [label && (0, jsx_runtime_1.jsx)("span", { className: (0, constants_1.selectControlBlock)('label'), children: label }), showPlaceholder && ((0, jsx_runtime_1.jsx)("span", { className: (0, constants_1.selectControlBlock)('placeholder'), children: placeholder })), showOptionsText && ((0, jsx_runtime_1.jsx)("span", { className: (0, constants_1.selectControlBlock)('option-text'), children: selectedOptionsContent }))] })), renderCounterComponent(), renderClearIcon({}), errorMessage && ((0, jsx_runtime_1.jsx)(Popover_1.Popover, { content: errorMessage, tooltipId: errorTooltipId, children: (0, jsx_runtime_1.jsx)("button", { "aria-label": (0, i18n_1.default)('label_show-error-info'), "aria-describedby": errorTooltipId, className: (0, constants_1.selectControlBlock)('error-icon'), children: (0, jsx_runtime_1.jsx)(Icon_1.Icon, { data: icons_1.TriangleExclamation, size: size === 's' ? 12 : 16 }) }) })), (0, jsx_runtime_1.jsx)(Icon_1.Icon, { className: (0, constants_1.selectControlBlock)('chevron-icon', { disabled }), data: icons_1.ChevronDown, "aria-hidden": "true" })] }) }));
});
exports.SelectControl.displayName = 'SelectControl';
