"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sheet = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const React = tslib_1.__importStar(require("react"));
const hooks_1 = require("../../hooks");
const Portal_1 = require("../Portal/Portal");
const SheetContent_1 = require("./SheetContent");
const constants_1 = require("./constants");
require("./Sheet.css");
const Sheet = ({ children, onClose, visible, id, title, className, contentClassName, swipeAreaClassName, allowHideOnContentScroll, hideTopBar, qa, }) => {
    const [open, setOpen] = React.useState(visible);
    const [prevVisible, setPrevVisible] = React.useState(visible);
    (0, hooks_1.useBodyScrollLock)({ enabled: open });
    if (!prevVisible && visible) {
        setOpen(true);
    }
    if (visible !== prevVisible) {
        setPrevVisible(visible);
    }
    const hideSheet = () => {
        if (onClose) {
            onClose();
        }
        setOpen(false);
    };
    if (!open) {
        return null;
    }
    return ((0, jsx_runtime_1.jsx)(Portal_1.Portal, { children: (0, jsx_runtime_1.jsx)("div", { "data-qa": qa, className: (0, constants_1.sheetBlock)(null, className), children: (0, jsx_runtime_1.jsx)(SheetContent_1.SheetContentContainer, { id: id, content: children, contentClassName: contentClassName, swipeAreaClassName: swipeAreaClassName, title: title, visible: visible, allowHideOnContentScroll: allowHideOnContentScroll, hideTopBar: hideTopBar, hideSheet: hideSheet }) }) }));
};
exports.Sheet = Sheet;
