"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.BreadcrumbItem = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const filterDOMProps_1 = require("../../utils/filterDOMProps");
const utils_1 = require("./utils");
function BreadcrumbItem(props) {
    var _a;
    const Element = props.href ? 'a' : 'span';
    const domProps = (0, filterDOMProps_1.filterDOMProps)(props, { labelable: true });
    let title = props.title;
    if (!title && typeof props.children === 'string') {
        title = props.children;
    }
    const handleAction = (event) => {
        if (props.disabled) {
            event.preventDefault();
            return;
        }
        if (typeof props.onAction === 'function') {
            props.onAction();
        }
        const target = event.currentTarget;
        if (typeof props.navigate === 'function' && target instanceof HTMLAnchorElement) {
            if (props.href && !event.isDefaultPrevented() && (0, utils_1.shouldClientNavigate)(target, event)) {
                event.preventDefault();
                props.navigate(props.href, props.routerOptions);
            }
        }
    };
    const isDisabled = props.disabled;
    let linkProps = {
        title,
        onClick: handleAction,
        'aria-disabled': isDisabled ? true : undefined,
    };
    if (Element === 'a') {
        linkProps.href = props.href;
        linkProps.hrefLang = props.hrefLang;
        linkProps.target = props.target;
        linkProps.rel = props.target === '_blank' && !props.rel ? 'noopener noreferrer' : props.rel;
        linkProps.download = props.download;
        linkProps.ping = props.ping;
        linkProps.referrerPolicy = props.referrerPolicy;
    }
    else {
        linkProps.role = 'link';
        linkProps.tabIndex = isDisabled ? undefined : 0;
        linkProps.onKeyDown = (event) => {
            if (event.key === 'Enter') {
                handleAction(event);
            }
        };
    }
    if (props.current) {
        linkProps['aria-current'] = (_a = props['aria-current']) !== null && _a !== void 0 ? _a : 'page';
    }
    if (props.itemType === 'menu') {
        linkProps = {};
    }
    return ((0, jsx_runtime_1.jsx)(Element, Object.assign({}, domProps, linkProps, { className: props.itemType === 'menu'
            ? (0, utils_1.b)('menu')
            : (0, utils_1.b)('link', {
                'is-current': props.current,
                'is-disabled': isDisabled && !props.current,
            }), children: props.children })));
}
exports.BreadcrumbItem = BreadcrumbItem;
BreadcrumbItem.displayName = 'Breadcrumbs.Item';
