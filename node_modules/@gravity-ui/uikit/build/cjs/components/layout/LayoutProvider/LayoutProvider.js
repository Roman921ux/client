"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.LayoutProvider = exports.PrivateLayoutProvider = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
/* eslint-disable valid-jsdoc */
const React = tslib_1.__importStar(require("react"));
const LayoutContext_1 = require("../contexts/LayoutContext");
const useCurrentActiveMediaQuery_1 = require("../hooks/useCurrentActiveMediaQuery");
const overrideLayoutTheme_1 = require("../utils/overrideLayoutTheme");
function PrivateLayoutProvider({ children, config: override, initialMediaQuery, }) {
    const parentContext = React.useContext(LayoutContext_1.LayoutContext);
    const theme = React.useMemo(() => (0, overrideLayoutTheme_1.overrideLayoutTheme)({ theme: parentContext.theme, override }), [override, parentContext.theme]);
    const activeMediaQuery = (0, useCurrentActiveMediaQuery_1.useCurrentActiveMediaQuery)(theme.breakpoints, initialMediaQuery);
    const value = React.useMemo(() => ({ activeMediaQuery, theme }), [activeMediaQuery, theme]);
    return (0, jsx_runtime_1.jsx)(LayoutContext_1.LayoutContext.Provider, { value: value, children: children });
}
exports.PrivateLayoutProvider = PrivateLayoutProvider;
/**
 * @deprecated - already used as part of ThemeProvider. To override layout theme use `layout` prop
 *
 * Provide context for layout components and current media queries.
 * ---
 * Storybook - https://preview.gravity-ui.com/uikit/?path=/docs/layout--playground#layoutprovider-and-layouttheme
 */
function LayoutProvider({ children }) {
    return children;
}
exports.LayoutProvider = LayoutProvider;
