"use strict";
'use client';
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThemeProvider = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("react/jsx-runtime");
const React = tslib_1.__importStar(require("react"));
const LayoutProvider_1 = require("../layout/LayoutProvider/LayoutProvider");
const cn_1 = require("../utils/cn");
const ThemeContext_1 = require("./ThemeContext");
const ThemeSettingsContext_1 = require("./ThemeSettingsContext");
const constants_1 = require("./constants");
const dom_helpers_1 = require("./dom-helpers");
const useSystemTheme_1 = require("./useSystemTheme");
const b = (0, cn_1.block)(constants_1.ROOT_CLASSNAME);
function ThemeProvider({ theme: themeProp, systemLightTheme: systemLightThemeProp, systemDarkTheme: systemDarkThemeProp, direction: directionProp, nativeScrollbar, scoped: scopedProp = false, rootClassName = '', children, layout, }) {
    var _a, _b, _c, _d;
    const parentThemeState = React.useContext(ThemeContext_1.ThemeContext);
    const systemThemeState = React.useContext(ThemeSettingsContext_1.ThemeSettingsContext);
    const hasParentProvider = parentThemeState !== undefined;
    const scoped = hasParentProvider || scopedProp;
    const parentTheme = (_a = parentThemeState === null || parentThemeState === void 0 ? void 0 : parentThemeState.theme) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_THEME;
    const theme = themeProp !== null && themeProp !== void 0 ? themeProp : parentTheme;
    const systemLightTheme = (_b = systemLightThemeProp !== null && systemLightThemeProp !== void 0 ? systemLightThemeProp : systemThemeState === null || systemThemeState === void 0 ? void 0 : systemThemeState.systemLightTheme) !== null && _b !== void 0 ? _b : constants_1.DEFAULT_LIGHT_THEME;
    const systemDarkTheme = (_c = systemDarkThemeProp !== null && systemDarkThemeProp !== void 0 ? systemDarkThemeProp : systemThemeState === null || systemThemeState === void 0 ? void 0 : systemThemeState.systemDarkTheme) !== null && _c !== void 0 ? _c : constants_1.DEFAULT_DARK_THEME;
    const parentDirection = (_d = parentThemeState === null || parentThemeState === void 0 ? void 0 : parentThemeState.direction) !== null && _d !== void 0 ? _d : constants_1.DEFAULT_DIRECTION;
    const direction = directionProp !== null && directionProp !== void 0 ? directionProp : parentDirection;
    const systemTheme = (0, useSystemTheme_1.useSystemTheme)() === 'light' ? systemLightTheme : systemDarkTheme;
    const themeValue = theme === 'system' ? systemTheme : theme;
    const prevRootClassName = React.useRef('');
    React.useLayoutEffect(() => {
        if (!scoped) {
            (0, dom_helpers_1.updateBodyClassName)({
                theme: themeValue,
                nativeScrollbar,
                className: rootClassName,
                prevClassName: prevRootClassName.current,
            });
            (0, dom_helpers_1.updateBodyDirection)(direction);
            prevRootClassName.current = rootClassName;
        }
    }, [scoped, themeValue, direction, nativeScrollbar, rootClassName]);
    const contextValue = React.useMemo(() => ({
        theme,
        themeValue,
        direction,
        scoped,
    }), [theme, themeValue, direction, scoped]);
    const themeSettingsContext = React.useMemo(() => ({ systemLightTheme, systemDarkTheme }), [systemLightTheme, systemDarkTheme]);
    return ((0, jsx_runtime_1.jsx)(LayoutProvider_1.PrivateLayoutProvider, Object.assign({}, layout, { children: (0, jsx_runtime_1.jsx)(ThemeContext_1.ThemeContext.Provider, { value: contextValue, children: (0, jsx_runtime_1.jsx)(ThemeSettingsContext_1.ThemeSettingsContext.Provider, { value: themeSettingsContext, children: scoped ? ((0, jsx_runtime_1.jsx)("div", { className: b({
                        theme: themeValue,
                        'native-scrollbar': nativeScrollbar !== false,
                    }, rootClassName), dir: direction, children: children })) : (children) }) }) })));
}
exports.ThemeProvider = ThemeProvider;
ThemeProvider.displayName = 'ThemeProvider';
