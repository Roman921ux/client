"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useBodyScrollLock = void 0;
const tslib_1 = require("tslib");
const React = tslib_1.__importStar(require("react"));
const PROPERTY_PADDING_RIGHT = 'padding-right';
const PROPERTY_PADDING_BOTTOM = 'padding-bottom';
const PROPERTY_OVERFLOW = 'overflow';
const STORED_BODY_STYLE_KEYS = [
    PROPERTY_OVERFLOW,
    PROPERTY_PADDING_RIGHT,
    PROPERTY_PADDING_BOTTOM,
];
function getStoredStyles() {
    const styles = {};
    for (const property of STORED_BODY_STYLE_KEYS) {
        styles[property] = document.body.style.getPropertyValue(property);
    }
    return styles;
}
let locks = 0;
let storedBodyStyle = {};
function useBodyScrollLock({ enabled }) {
    React.useLayoutEffect(() => {
        if (enabled) {
            locks++;
            if (locks === 1) {
                setBodyStyles();
            }
            return () => {
                locks--;
                if (locks === 0) {
                    restoreBodyStyles();
                }
            };
        }
        return undefined;
    }, [enabled]);
}
exports.useBodyScrollLock = useBodyScrollLock;
function setBodyStyles() {
    const yScrollbarWidth = getYScrollbarWidth();
    const xScrollbarWidth = getXScrollbarWidth();
    const bodyPadding = getBodyComputedPadding();
    storedBodyStyle = getStoredStyles();
    document.body.style.setProperty(PROPERTY_OVERFLOW, 'hidden');
    if (yScrollbarWidth) {
        document.body.style.setProperty(PROPERTY_PADDING_RIGHT, `${bodyPadding.right + yScrollbarWidth}px`);
    }
    if (xScrollbarWidth) {
        document.body.style.setProperty(PROPERTY_PADDING_BOTTOM, `${bodyPadding.bottom + xScrollbarWidth}px`);
    }
}
function restoreBodyStyles() {
    for (const property of STORED_BODY_STYLE_KEYS) {
        const storedProperty = storedBodyStyle[property];
        if (storedProperty) {
            document.body.style.setProperty(property, storedProperty);
        }
        else {
            document.body.style.removeProperty(property);
        }
    }
}
function getYScrollbarWidth() {
    return window.innerWidth - document.documentElement.clientWidth;
}
function getXScrollbarWidth() {
    return window.innerHeight - document.documentElement.clientHeight;
}
function getBodyComputedPadding() {
    const computedStyle = window.getComputedStyle(document.body);
    return {
        top: Number.parseFloat(computedStyle.paddingTop),
        right: Number.parseFloat(computedStyle.paddingRight),
        bottom: Number.parseFloat(computedStyle.paddingBottom),
        left: Number.parseFloat(computedStyle.paddingLeft),
    };
}
