'use client';
import { __rest } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as React from 'react';
import { useForkRef } from '../../hooks';
import { useTooltipVisible } from '../../hooks/private';
import { Hotkey } from '../Hotkey';
import { Popup } from '../Popup';
import { block } from '../utils/cn';
import { getElementRef } from '../utils/getElementRef';
import './ActionTooltip.css';
const DEFAULT_PLACEMENT = ['bottom', 'top'];
const b = block('action-tooltip');
export function ActionTooltip(props) {
    const { placement = DEFAULT_PLACEMENT, title, hotkey, children, className, contentClassName, description, disabled = false, style, qa, id, disablePortal } = props, delayProps = __rest(props, ["placement", "title", "hotkey", "children", "className", "contentClassName", "description", "disabled", "style", "qa", "id", "disablePortal"]);
    const [anchorElement, setAnchorElement] = React.useState(null);
    const tooltipVisible = useTooltipVisible(anchorElement, delayProps);
    const renderPopup = () => {
        return (_jsx(Popup, { id: id, disablePortal: disablePortal, role: "tooltip", className: b(null, className), style: style, open: tooltipVisible && !disabled, placement: placement, anchorRef: { current: anchorElement }, disableEscapeKeyDown: true, disableOutsideClick: true, disableLayer: true, qa: qa, children: _jsxs("div", { className: b('content', contentClassName), children: [_jsxs("div", { className: b('heading'), children: [_jsx("div", { className: b('title'), children: title }), hotkey && _jsx(Hotkey, { view: "dark", value: hotkey, className: b('hotkey') })] }), description && _jsx("div", { className: b('description'), children: description })] }) }));
    };
    const child = React.Children.only(children);
    const childRef = getElementRef(child);
    const ref = useForkRef(setAnchorElement, childRef);
    return (_jsxs(React.Fragment, { children: [React.cloneElement(child, { ref }), anchorElement ? renderPopup() : null] }));
}
