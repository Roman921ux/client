'use client';
import { __rest } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as React from 'react';
import { ActionTooltip } from '../ActionTooltip';
import { Button } from '../Button';
import { ClipboardIcon } from '../ClipboardIcon';
import { CopyToClipboard } from '../CopyToClipboard';
import { block } from '../utils/cn';
import i18n from './i18n';
import './ClipboardButton.css';
const b = block('clipboard-button');
const DEFAULT_TIMEOUT = 1200;
const TOOLTIP_ANIMATION = 200;
const ButtonSizeToIconSize = {
    xs: 12,
    s: 16,
    m: 16,
    l: 16,
    xl: 20,
};
const ClipboardButtonComponent = (props) => {
    const { size = 'm', hasTooltip = true, tooltipInitialText = i18n('startCopy'), tooltipSuccessText = i18n('endCopy'), status, view = 'flat', extraProps = {}, children, iconPosition = 'start', closeDelay, onMouseEnter, onFocus } = props, rest = __rest(props, ["size", "hasTooltip", "tooltipInitialText", "tooltipSuccessText", "status", "view", "extraProps", "children", "iconPosition", "closeDelay", "onMouseEnter", "onFocus"]);
    const buttonIcon = (_jsx(Button.Icon, { className: b('icon'), children: _jsx(ClipboardIcon, { size: ButtonSizeToIconSize[size], status: status }) }));
    return (_jsx(ActionTooltip, { title: status === 'success' ? tooltipSuccessText : tooltipInitialText, disabled: !hasTooltip, closeDelay: closeDelay, children: _jsxs(Button, Object.assign({ view: view, size: size, extraProps: Object.assign({ 'aria-label': tooltipInitialText }, extraProps), onMouseEnter: onMouseEnter, onFocus: onFocus }, rest, { children: [iconPosition === 'start' ? buttonIcon : null, children, iconPosition === 'end' ? buttonIcon : null] })) }));
};
export function ClipboardButton(props) {
    const { text, timeout = DEFAULT_TIMEOUT, onCopy, options, hasTooltip = true, onMouseEnter, onFocus } = props, buttonProps = __rest(props, ["text", "timeout", "onCopy", "options", "hasTooltip", "onMouseEnter", "onFocus"]);
    const timerIdRef = React.useRef();
    const [tooltipCloseDelay, setTooltipCloseDelay] = React.useState(undefined);
    const [tooltipDisabled, setTooltipDisabled] = React.useState(false);
    React.useEffect(() => window.clearTimeout(timerIdRef.current), []);
    const handleCopy = React.useCallback((text, result) => {
        onCopy === null || onCopy === void 0 ? void 0 : onCopy(text, result);
        setTooltipDisabled(false);
        setTooltipCloseDelay(timeout);
        window.clearTimeout(timerIdRef.current);
        timerIdRef.current = window.setTimeout(() => {
            setTooltipDisabled(true);
        }, timeout - TOOLTIP_ANIMATION);
    }, [onCopy, timeout]);
    const resetTooltip = React.useCallback(() => {
        if (tooltipDisabled) {
            setTooltipDisabled(false);
            setTooltipCloseDelay(undefined);
        }
    }, [tooltipDisabled]);
    const handleMouseEnter = React.useCallback((event) => {
        onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(event);
        resetTooltip();
    }, [onMouseEnter, resetTooltip]);
    const handleFocus = React.useCallback((event) => {
        onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);
        resetTooltip();
    }, [onFocus, resetTooltip]);
    return (_jsx(CopyToClipboard, { text: text, timeout: timeout, onCopy: handleCopy, options: options, children: (status) => (_jsx(ClipboardButtonComponent, Object.assign({}, buttonProps, { closeDelay: tooltipCloseDelay, hasTooltip: hasTooltip && !tooltipDisabled, status: status, onMouseEnter: handleMouseEnter, onFocus: handleFocus }))) }));
}
