'use client';
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as React from 'react';
import { Button } from '../../Button';
import { Popup } from '../../Popup';
import { block } from '../../utils/cn';
import './DialogFooter.css';
const b = block('dialog-footer');
function getButtonView(preset) {
    switch (preset) {
        case 'default':
            return 'action';
        case 'success':
            return 'action';
        case 'danger':
            return 'action';
        default:
            return 'action';
    }
}
export class DialogFooter extends React.Component {
    constructor() {
        super(...arguments);
        this.errorTooltipRef = React.createRef();
        this.handleKeyDown = (event) => {
            if (event.key === 'Enter') {
                event.preventDefault();
                if (this.props.onClickButtonApply) {
                    this.props.onClickButtonApply(event);
                }
            }
        };
    }
    componentDidMount() {
        if (this.props.listenKeyEnter) {
            this.attachKeyDownListeners();
        }
    }
    componentDidUpdate(prevProps) {
        if (!this.props.listenKeyEnter && prevProps.listenKeyEnter) {
            this.detachKeyDownListeners();
        }
        if (this.props.listenKeyEnter && !prevProps.listenKeyEnter) {
            this.attachKeyDownListeners();
        }
    }
    componentWillUnmount() {
        this.detachKeyDownListeners();
    }
    render() {
        const { onClickButtonCancel, onClickButtonApply, loading, textButtonCancel, textButtonApply, propsButtonCancel, propsButtonApply, preset, children, errorText, showError, renderButtons, className, } = this.props;
        const buttonCancel = (_jsx("div", { className: b('button', { action: 'cancel' }), children: _jsx(Button, Object.assign({ view: textButtonApply ? 'flat' : 'normal', size: "l", width: "max", onClick: onClickButtonCancel, disabled: loading }, propsButtonCancel, { children: textButtonCancel })) }));
        const buttonApply = (_jsxs("div", { className: b('button', { action: 'apply' }), children: [_jsx(Button, Object.assign({ ref: this.errorTooltipRef, type: "submit", view: getButtonView(preset), size: "l", width: "max", onClick: onClickButtonApply, loading: loading, className: b('button-apply', { preset }) }, propsButtonApply, { children: textButtonApply })), errorText && (_jsx(Popup, { open: showError, anchorRef: this.errorTooltipRef, placement: ['bottom', 'top'], disableLayer: true, disablePortal: true, hasArrow: true, children: _jsx("div", { className: b('error'), children: errorText }) }))] }));
        return (_jsxs("div", { className: b(null, className), children: [_jsx("div", { className: b('children'), children: children }), _jsx("div", { className: b('bts-wrapper'), children: renderButtons ? (renderButtons(buttonApply, buttonCancel)) : (_jsxs(React.Fragment, { children: [textButtonCancel && buttonCancel, textButtonApply && buttonApply] })) })] }));
    }
    attachKeyDownListeners() {
        setTimeout(() => {
            window.addEventListener('keydown', this.handleKeyDown);
        }, 0);
    }
    detachKeyDownListeners() {
        window.removeEventListener('keydown', this.handleKeyDown);
    }
}
DialogFooter.defaultProps = {
    preset: 'default',
    showError: false,
    listenKeyEnter: false,
};
