import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as React from 'react';
import { ArrowLeft as ArrowLeftIcon } from '@gravity-ui/icons';
import { Button } from '../../Button';
import { Icon } from '../../Icon';
import { Sheet } from '../../Sheet';
import { block } from '../../utils/cn';
import i18n from '../i18n';
import './MobileImagePreview.css';
const cn = block('mobile-image-preview');
export function MobileImagePreview({ previewSrc, visible, onClose, actions, fileName, }) {
    const [showError, setShowError] = React.useState(false);
    const showSheet = Boolean(previewSrc && visible);
    const handleImagesError = () => {
        setShowError(true);
    };
    return (_jsx(Sheet, { visible: showSheet, onClose: onClose, contentClassName: cn('sheet-content'), children: _jsxs("div", { className: cn('container'), style: {}, children: [showError ? (_jsx("div", { className: cn('error-label'), children: i18n('label_image-preview-error') })) : (_jsx("img", { className: cn('image'), src: previewSrc, alt: fileName, onError: handleImagesError })), _jsx(Button, { view: "raised", size: "xl", className: cn('back-button'), onClick: onClose, children: _jsx(Icon, { data: ArrowLeftIcon, size: 20 }) }), _jsx("div", { className: cn('action-buttons'), children: actions === null || actions === void 0 ? void 0 : actions.map((action) => (_jsx(Button, { size: "xl", onClick: action.onClick, view: "raised", children: "action.icon" }, action.id))) })] }) }));
}
MobileImagePreview.displayName = 'MobileImagePreview';
