'use client';
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { ChevronLeft, ChevronRight, ChevronsLeft } from '@gravity-ui/icons';
import { Button } from '../../../Button';
import { Icon } from '../../../Icon';
import { PaginationQa } from '../../constants';
import i18n from '../../i18n';
export const PaginationButton = ({ item, size, className, page, pageSize, onUpdate, compact, }) => {
    let button = null;
    const { disabled } = item;
    switch (item.action) {
        case 'first':
            button = (_jsxs(Button, { size: size, view: "outlined", className: className, onClick: () => onUpdate(1, pageSize), title: compact ? i18n('button_first') : undefined, disabled: disabled, qa: PaginationQa.PaginationButtonFirst, children: [_jsx(Icon, { data: ChevronsLeft, size: "16" }), compact ? undefined : i18n('button_first')] }));
            break;
        case 'previous':
            button = (_jsxs(Button, { size: size, view: "outlined", className: className, onClick: () => onUpdate(page - 1, pageSize), title: compact ? i18n('button_previous') : undefined, disabled: disabled, qa: PaginationQa.PaginationButtonPrevious, children: [_jsx(Icon, { data: ChevronLeft, size: "16" }), compact ? undefined : i18n('button_previous')] }));
            break;
        case 'next':
            button = (_jsxs(Button, { size: size, view: "outlined", className: className, onClick: () => onUpdate(page + 1, pageSize), title: compact ? i18n('button_next') : undefined, disabled: disabled, qa: PaginationQa.PaginationButtonNext, children: [_jsx(Icon, { data: ChevronRight, size: "16" }), compact ? undefined : i18n('button_next')] }));
            break;
    }
    return button;
};
