'use client';
import { jsx as _jsx } from "react/jsx-runtime";
import { CSSTransition, TransitionGroup } from 'react-transition-group';
import { block } from '../../utils/cn';
import { getCSSTransitionClassNames } from '../../utils/transition';
import { Toast } from '../Toast/Toast';
import './ToastAnimation.css';
import './ToastList.css';
const desktopTransitionClassNames = getCSSTransitionClassNames(block('toast-animation-desktop'));
const mobileTransitionClassNames = getCSSTransitionClassNames(block('toast-animation-mobile'));
export function ToastList(props) {
    const { toasts, mobile, removeCallback } = props;
    return (_jsx(TransitionGroup, { component: null, children: toasts.map((toast) => (_jsx(CSSTransition, { nodeRef: toast.ref, classNames: mobile ? mobileTransitionClassNames : desktopTransitionClassNames, addEndListener: (done) => { var _a, _b; return (_b = (_a = toast.ref) === null || _a === void 0 ? void 0 : _a.current) === null || _b === void 0 ? void 0 : _b.addEventListener('animationend', done); }, onEnter: () => updateToastHeightCssProperty(toast), onExit: () => updateToastHeightCssProperty(toast), children: _jsx(Toast, Object.assign({}, toast, { mobile: mobile, removeCallback: removeCallback })) }, `${toast.name}_${toast.addedAt}`))) }));
}
function updateToastHeightCssProperty(toast) {
    var _a;
    if ((_a = toast.ref) === null || _a === void 0 ? void 0 : _a.current) {
        toast.ref.current.style.setProperty('--_--item-height', `${toast.ref.current.offsetHeight}px`);
    }
}
