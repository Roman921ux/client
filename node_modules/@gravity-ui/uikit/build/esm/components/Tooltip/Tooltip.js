'use client';
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as React from 'react';
import { useForkRef } from '../../hooks';
import { useTooltipVisible } from '../../hooks/private';
import { Popup } from '../Popup';
import { Text } from '../Text';
import { block } from '../utils/cn';
import { getElementRef } from '../utils/getElementRef';
import './Tooltip.css';
const b = block('tooltip');
const DEFAULT_PLACEMENT = ['bottom', 'top'];
export const Tooltip = (props) => {
    const { children, content, disabled, placement = DEFAULT_PLACEMENT, qa, id, className, style, disablePortal, contentClassName, openDelay = 1000, closeDelay, } = props;
    const [anchorElement, setAnchorElement] = React.useState(null);
    const tooltipVisible = useTooltipVisible(anchorElement, {
        openDelay,
        closeDelay,
        preventTriggerOnFocus: true,
    });
    const renderPopup = () => {
        return (_jsx(Popup, { id: id, role: "tooltip", className: b(null, className), style: style, open: tooltipVisible && !disabled, placement: placement, anchorRef: { current: anchorElement }, disablePortal: disablePortal, disableEscapeKeyDown: true, disableOutsideClick: true, disableLayer: true, qa: qa, children: _jsx("div", { className: b('content', contentClassName), children: _jsx(Text, { variant: "body-short", color: "complementary", children: content }) }) }));
    };
    const child = React.Children.only(children);
    const childRef = getElementRef(child);
    const ref = useForkRef(setAnchorElement, childRef);
    return (_jsxs(React.Fragment, { children: [React.cloneElement(child, { ref }), anchorElement ? renderPopup() : null] }));
};
