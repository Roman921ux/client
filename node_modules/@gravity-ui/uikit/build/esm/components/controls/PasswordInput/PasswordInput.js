'use client';
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as React from 'react';
import { Eye, EyeSlash } from '@gravity-ui/icons';
import { useControlledState } from '../../../hooks';
import { ActionTooltip } from '../../ActionTooltip';
import { Button } from '../../Button';
import { ClipboardButton } from '../../ClipboardButton';
import { Icon } from '../../Icon';
import { block } from '../../utils/cn';
import { TextInput } from '../TextInput';
import { PasswordInputQa } from './constants';
import { i18n } from './i18n';
import { getActionButtonSizeAndIconSize } from './utils';
import './PasswordInput.css';
const b = block('password-input');
export const PasswordInput = (props) => {
    var _a;
    const { autoComplete, controlProps, endContent, rightContent, hideCopyButton = false, hideRevealButton = false, showCopyTooltip = false, showRevealTooltip = false, size = 'm', } = props;
    const [inputValue, setInputValue] = useControlledState(props.value, (_a = props.defaultValue) !== null && _a !== void 0 ? _a : '', props.onUpdate);
    const [revealValue, setRevealValue] = useControlledState(props.revealValue, false, props.onRevealValueUpdate);
    const { actionButtonSize, iconSize } = getActionButtonSizeAndIconSize(size);
    const additionalEndContent = (_jsxs(React.Fragment, { children: [endContent || rightContent, inputValue && !hideCopyButton && !props.disabled ? (_jsx(ClipboardButton, { view: "flat-secondary", text: inputValue, hasTooltip: showCopyTooltip, size: actionButtonSize, className: b('copy-button'), qa: PasswordInputQa.copyButton })) : null, hideRevealButton ? null : (_jsx(ActionTooltip, { disabled: !showRevealTooltip, title: revealValue ? i18n('label_hide-password') : i18n('label_show-password'), children: _jsx(Button, { qa: PasswordInputQa.revealButton, view: "flat-secondary", disabled: props.disabled, onClick: () => setRevealValue(!revealValue), size: actionButtonSize, extraProps: {
                        'aria-label': revealValue
                            ? i18n('label_hide-password')
                            : i18n('label_show-password'),
                        onMouseDown: (event) => event.preventDefault(),
                    }, children: _jsx(Icon, { data: revealValue ? EyeSlash : Eye, size: iconSize }) }) }))] }));
    return (_jsx(TextInput, Object.assign({}, props, { type: revealValue ? 'text' : 'password', unstable_endContent: additionalEndContent, autoComplete: autoComplete ? autoComplete : 'new-password', controlProps: Object.assign(Object.assign({}, controlProps), { className: b('input-control', controlProps === null || controlProps === void 0 ? void 0 : controlProps.className) }), value: inputValue, onUpdate: setInputValue })));
};
