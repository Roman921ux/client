import { __rest } from "tslib";
import { jsx as _jsx } from "react/jsx-runtime";
import * as React from 'react';
import { spacing } from '../../../layout';
import { LIST_ITEM_DATA_ATR, modToHeight } from '../../constants';
import { ListItemViewContent, isListItemContentPropsGuard } from './ListItemViewContent';
import { b } from './styles';
export const ListItemView = React.forwardRef(function ListItemView(_a, ref) {
    var { id, as: asProps, size = 'm', active, selected, disabled, selectionViewType = 'multiple', activeOnHover: propsActiveOnHover, className, height, dragging, style: propsStyle, content, role = 'option', onClick: _onClick } = _a, rest = __rest(_a, ["id", "as", "size", "active", "selected", "disabled", "selectionViewType", "activeOnHover", "className", "height", "dragging", "style", "content", "role", "onClick"]);
    const Tag = asProps || 'li';
    const onClick = disabled ? undefined : _onClick;
    const activeOnHover = typeof propsActiveOnHover === 'boolean' ? propsActiveOnHover : Boolean(onClick);
    const style = Object.assign({ minHeight: `var(--g-list-item-height, ${height !== null && height !== void 0 ? height : modToHeight[size][Number(Boolean(isListItemContentPropsGuard(content) ? content === null || content === void 0 ? void 0 : content.subtitle : false))]}px)` }, propsStyle);
    return (_jsx(Tag, Object.assign({ [LIST_ITEM_DATA_ATR]: id, role: role, "aria-selected": selected, onClick: onClick, className: b({
            active: dragging || active,
            selected: selected && selectionViewType === 'single',
            activeOnHover,
            radius: size,
            size,
            dragging,
            clickable: Boolean(onClick),
        }, spacing({ px: 2 }, className)), style: style, ref: ref }, rest, { children: isListItemContentPropsGuard(content) ? (_jsx(ListItemViewContent, Object.assign({}, content, { hasSelectionIcon: selectionViewType === 'multiple', selected: selected, disabled: disabled }))) : (content) })));
});
