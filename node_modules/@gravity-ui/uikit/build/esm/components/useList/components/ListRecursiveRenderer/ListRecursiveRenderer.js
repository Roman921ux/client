import { __rest } from "tslib";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { block } from '../../../utils/cn';
import { isTreeItemGuard } from '../../utils/isTreeItemGuard';
import './ListRecursiveRenderer.css';
const b = block('list-recursive-renderer');
// Saves the nested html structure for tree data structure
export function ListItemRecursiveRenderer(_a) {
    var _b;
    var { id, itemSchema, list } = _a, props = __rest(_a, ["id", "itemSchema", "list"]);
    const node = props.children(id, list.structure.idToFlattenIndex[id]);
    if (isTreeItemGuard(itemSchema) && itemSchema.children) {
        const isExpanded = list.state.expandedById && id in list.state.expandedById
            ? list.state.expandedById[id]
            : true;
        return (_jsxs("ul", { style: props.style, className: b(null, props.className), role: "group", children: [node, isExpanded &&
                    Boolean((_b = list.structure.groupsState[id]) === null || _b === void 0 ? void 0 : _b.childrenIds) &&
                    itemSchema.children.map((item, index) => (_jsx(ListItemRecursiveRenderer, Object.assign({ list: list, id: list.structure.groupsState[id].childrenIds[index], itemSchema: item }, props), index)))] }));
    }
    return node;
}
